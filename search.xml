<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[谢谢你，撑起我们的半边天！]]></title>
      <url>/2019/03/08/suibi/women_day/</url>
      <content type="html"><![CDATA[<figure class="image-box">
                <img src="/2019/03/08/suibi/women_day/women_day.jpeg" alt title class>
                <p></p>
            </figure>
<p>@column-1{</p>
<p>@card{</p>
<p>@center{</p>
<p><strong>你曾是一步一吟的少女</strong></p>
<p>行走在山岭海边</p>
<p>微风拂过灿烂的脸颊</p>
<p><strong>后来</strong></p>
<p>你成为了妻子</p>
<p>成为了母亲</p>
<p>从那时起</p>
<p>生活和岁月</p>
<p>便开始给你刻下一道道年轮</p>
<p><strong>我想</strong></p>
<p>送你三月的风 </p>
<p>吹走你的烦恼</p>
<p>送你一整个春天 </p>
<p>愿你的生活阳光灿烂</p>
<p>}</p>
<p>}</p>
<p>}</p>
<iframe type="music" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1331964616&auto=1&height=66"></iframe>]]></content>
      
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 动画（三）插值器和估值器]]></title>
      <url>/2018/12/21/android/android12/</url>
      <content type="html"><![CDATA[<p>在日常的Android开发中，我们可能经常会使用到动画，但是Android有哪些动画，它们有什么区别，我们也需要去了解。下面就对Android中常用的动画做一下总结。</p>
<p>前面一篇文章已经总结了传统动画，如果需要了解，可以点击下面链接。<br><strong><a href="https://huang2177.github.io/2018/12/15/android/android10">Android 动画（一）Animation</a>。</strong></p>
<p>或者想了解下插值器和估值器，可以点击下面链接。<br><strong><a href="https://huang2177.github.io/2018/12/20/android/android11">Android 动画（二）Animator</a>。</strong></p>
<h4 id="插值器（Interpolator）"><a href="#插值器（Interpolator）" class="headerlink" title="插值器（Interpolator）"></a>插值器（Interpolator）</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>作用：设置 属性值 从初始值过渡到结束值 的<strong>变化规律</strong>；如动画效果变化的模式，如匀速变化、加速变化 等等。</p>
<h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ul>
<li><p>在XML代码中设置插值器属性<strong>android:interpolator</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    // 通过资源ID设置插值器</span><br><span class="line">    android:interpolator=&quot;@android:anim/overshoot_interpolator&quot;</span><br><span class="line">    android:duration=&quot;3000&quot;</span><br><span class="line">    android:fromXScale=&quot;0.0&quot;</span><br><span class="line">    android:fromYScale=&quot;0.0&quot;</span><br><span class="line">    android:pivotX=&quot;50%&quot;</span><br><span class="line">    android:pivotY=&quot;50%&quot;</span><br><span class="line">    android:toXScale=&quot;2&quot;</span><br><span class="line">    android:toYScale=&quot;2&quot; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过java代码设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 步骤1:创建 需要设置动画的 视图View</span><br><span class="line">Button mButton = (Button) findViewById(R.id.Button);</span><br><span class="line">// 步骤2：创建透明度动画的对象 &amp; 设置动画效果</span><br><span class="line">Animation alphaAnimation = new AlphaAnimation(1,0);</span><br><span class="line">alphaAnimation.setDuration(3000);</span><br><span class="line">// 步骤3：创建对应的插值器类对象    </span><br><span class="line">Interpolator overshootInterpolator = new OvershootInterpolator();</span><br><span class="line">// 步骤4：给动画设置插值器 </span><br><span class="line">alphaAnimation.setInterpolator(overshootInterpolator);</span><br><span class="line">// 步骤5：播放动画</span><br><span class="line">mButton.startAnimation(alphaAnimation);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="自定义插值器"><a href="#自定义插值器" class="headerlink" title="自定义插值器"></a>自定义插值器</h5><ul>
<li>本质：根据动画的进度（0%-100%）计算出当前属性值改变的百分比</li>
<li>具体使用：自定义插值器需要实现 Interpolator / TimeInterpolator接口 &amp; 复写getInterpolation（）</li>
</ul>
<p>系统提供相关插值器的插值器的理解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 匀速 LinearInterpolator</span><br><span class="line">@HasNativeInterpolator  </span><br><span class="line">public class LinearInterpolator extends BaseInterpolator implements NativeInterpolatorFactory&#123;</span><br><span class="line">    public float getInterpolation(float input) &#123;  </span><br><span class="line">        return input;  </span><br><span class="line">        // 没有对input值进行任何逻辑处理，直接返回</span><br><span class="line">        // 即input值 = fraction值</span><br><span class="line">        // 因为input值是匀速增加的，因此fraction值也是匀速增加的.</span><br><span class="line">        // 所以动画的运动情况也是匀速的，所以是匀速插值器</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 先加速再减速 AccelerateDecelerateInterpolator</span><br><span class="line">@HasNativeInterpolator  </span><br><span class="line">public class AccelerateDecelerateInterpolator implements Interpolator,NativeInterpolatorFactory&#123;</span><br><span class="line">    public float getInterpolation(float input) &#123;  </span><br><span class="line">        return (float)(Math.cos((input + 1) * Math.PI) / 2.0f) + 0.5f;</span><br><span class="line">        // 使用了余弦函数，因input的取值范围是0到1，那么cos函数中的取值范围就是π到2π。</span><br><span class="line">        // 而cos(π)的结果是-1，cos(2π)的结果是1</span><br><span class="line">        // 所以该值除以2加上0.5后，getInterpolation()方法最终返回的结果值还是在0到1之间。</span><br><span class="line">        // 只不过经过了余弦运算之后，最终的结果不再是匀速增加的了，而是经历了一个先加速后减速的过程.</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="估值器（TypeEvaluator）"><a href="#估值器（TypeEvaluator）" class="headerlink" title="估值器（TypeEvaluator）"></a>估值器（TypeEvaluator）</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p>作用：设置 属性值 从初始值过渡到结束值 的<strong>变化具体数值</strong></p>
<h5 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在第3个参数中传入对应估值器类的对象</span><br><span class="line">ObjectAnimator anim = ObjectAnimator.ofObject(myView2, &quot;height&quot;, new Evaluator()，1，3);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>系统内置的估值器有3个：<br> IntEvaluator：以整型的形式从初始值 - 结束值 进行过渡<br> FloatEvaluator：以浮点型的形式从初始值 - 结束值 进行过渡<br> ArgbEvaluator：以Argb类型的形式从初始值 - 结束值 进行过渡</p>
</blockquote>
<h5 id="自定义估值器"><a href="#自定义估值器" class="headerlink" title="自定义估值器"></a>自定义估值器</h5><blockquote>
<p>自定义估值器需要实现 TypeEvaluator接口 &amp; 复写evaluate()</p>
</blockquote>
<p>看一个已经实现好的系统内置的浮点型插值器：FloatEvaluator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class FloatEvaluator implements TypeEvaluator &#123;  </span><br><span class="line">    // FloatEvaluator实现了TypeEvaluator接口</span><br><span class="line">    // 重写evaluate()</span><br><span class="line">    public Object evaluate(float fraction, Object startValue, Object endValue) &#123;  </span><br><span class="line">        // fraction：表示动画完成度（根据它来计算当前动画的值）</span><br><span class="line">        // startValue、endValue：动画的初始值和结束值</span><br><span class="line">        float startFloat = ((Number) startValue).floatValue();  </span><br><span class="line">        return startFloat + fraction * (((Number) endValue).floatValue() - startFloat);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>初始值 过渡 到结束值 的算法是：</p>
<ol>
<li>用结束值减去初始值，算出它们之间的差值</li>
<li>用上述差值乘以fraction系数</li>
<li>再加上初始值，就得到当前动画的值</li>
</ol>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> android-动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 动画（二）Animator]]></title>
      <url>/2018/12/20/android/android11/</url>
      <content type="html"><![CDATA[<p>在日常的Android开发中，我们可能经常会使用到动画，但是Android有哪些动画，它们有什么区别，我们也需要去了解。下面就对Android中常用的动画做一下总结。</p>
<p>前面一篇文章已经总结了传统动画，如果需要了解，可以点击下面链接。<br><strong><a href="https://huang2177.github.io/2018/12/15/android/android10">Android 动画（一）Animation</a>。</strong></p>
<p>或者想了解下插值器和估值器，可以点击下面链接。<br><strong><a href="https://huang2177.github.io/2018/12/21/android/android12">Android 动画（三）插值器和估值器</a>。</strong></p>
<blockquote>
<p>属性动画，是通过操作对象属性的动画。因此，所有补间动画的内容，都可以通过属性动画实现。</p>
</blockquote>
<h4 id="属性动画核心原理"><a href="#属性动画核心原理" class="headerlink" title="属性动画核心原理"></a>属性动画核心原理</h4><p>在上面实现属性动画的时候，我们使用到了<strong>ObjectAnimator</strong>这个类，这个类继承自<strong>ValueAnimator</strong>，而ValueAnimator则继承自<strong>Animator</strong>。<br>使用这个类可以对任意对象的任意属性进行动画操作。而ValueAnimator是整个属性动画机制当中最核心的一个类。</p>
<blockquote>
<p>属性动画的运行机制是通过不断地对值进行操作来实现的，而初始值和结束值之间的动画过渡就是由ValueAnimator这个类来负责计算的。<br>它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，那么ValueAnimator就会完成从初始值平滑地过渡的效果。<br>除此之外，ValueAnimator还负责管理动画的播放次数、播放模式、以及对动画设置监听器等。</p>
</blockquote>
<p>但是，动画是怎样平滑过渡的呢？实际上是由<strong>TypeEvaluator</strong>和<strong>TimeInterpolator</strong>决定的：</p>
<blockquote>
<p>TypeEvaluator决定了动画如何从初始值过渡到结束值。<br>TimeInterpolator 决定了动画从初始值过渡到结束值每一秒具体的属性值。</p>
</blockquote>
<h4 id="属性动画实现传统动画"><a href="#属性动画实现传统动画" class="headerlink" title="属性动画实现传统动画"></a>属性动画实现传统动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void RotateAnimation() &#123;</span><br><span class="line">     ObjectAnimator anim = ObjectAnimator.ofFloat(myView, &quot;rotation&quot;, 0f, 360f);</span><br><span class="line">     anim.setDuration(1000);</span><br><span class="line">     anim.start();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> private void AlpahAnimation() &#123;</span><br><span class="line">     ObjectAnimator anim = ObjectAnimator.ofFloat(myView, &quot;alpha&quot;, 1.0f, 0.8f, 0.6f, 0.4f, 0.2f, 0.0f);</span><br><span class="line">     anim.setRepeatCount(-1);</span><br><span class="line">     anim.setRepeatMode(ObjectAnimator.REVERSE);</span><br><span class="line">     anim.setDuration(2000);</span><br><span class="line">     anim.start();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>当然属性动画也可以组合使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator alphaAnim = ObjectAnimator.ofFloat(myView, &quot;alpha&quot;, 1.0f, 0.5f, 0.8f, 1.0f);</span><br><span class="line">ObjectAnimator scaleXAnim = ObjectAnimator.ofFloat(myView, &quot;scaleX&quot;, 0.0f, 1.0f);</span><br><span class="line">ObjectAnimator scaleYAnim = ObjectAnimator.ofFloat(myView, &quot;scaleY&quot;, 0.0f, 2.0f);</span><br><span class="line">ObjectAnimator rotateAnim = ObjectAnimator.ofFloat(myView, &quot;rotation&quot;, 0, 360);</span><br><span class="line">ObjectAnimator transXAnim = ObjectAnimator.ofFloat(myView, &quot;translationX&quot;, 100, 400);</span><br><span class="line">ObjectAnimator transYAnim = ObjectAnimator.ofFloat(myView, &quot;tranlsationY&quot;, 100, 750);</span><br><span class="line">AnimatorSet set = new AnimatorSet();</span><br><span class="line">// 同时进行</span><br><span class="line">set.playTogether(alphaAnim, scaleXAnim, scaleYAnim, rotateAnim, transXAnim, transYAnim);</span><br><span class="line">// 按时序进行</span><br><span class="line">//set.playSequentially(alphaAnim, scaleXAnim, scaleYAnim, rotateAnim, transXAnim, transYAnim);</span><br><span class="line">set.setDuration(3000);</span><br><span class="line">set.start();</span><br></pre></td></tr></table></figure></p>
<h4 id="animate-的原理"><a href="#animate-的原理" class="headerlink" title="animate()的原理"></a>animate()的原理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ViewPropertyAnimator animator = tvTodayRank.animate();</span><br><span class="line">animator.alpha(1f)</span><br><span class="line">        .rotation(360f)</span><br><span class="line">        .scaleX(25f)</span><br><span class="line">        .scaleXBy(23f)</span><br><span class="line">        .start();</span><br></pre></td></tr></table></figure>
<p>看一下调用start()的源码，调用start()后执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Starts the currently pending property animations immediately. Calling &lt;code&gt;start()&lt;/code&gt;</span><br><span class="line"> * is optional because all animations start automatically at the next opportunity. However,</span><br><span class="line"> * if the animations are needed to start immediately and synchronously (not at the time when</span><br><span class="line"> * the next event is processed by the hierarchy, which is when the animations would begin</span><br><span class="line"> * otherwise), then this method can be used.</span><br><span class="line"> */</span><br><span class="line">public void start() &#123;</span><br><span class="line">    mView.removeCallbacks(mAnimationStarter);</span><br><span class="line">    startAnimation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>startAnimation()：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Starts the underlying Animator for a set of properties. We use a single animator that</span><br><span class="line">    * simply runs from 0 to 1, and then use that fractional value to set each property</span><br><span class="line">    * value accordingly.</span><br><span class="line">    */</span><br><span class="line">   private void startAnimation() &#123;</span><br><span class="line">       if (mRTBackend != null &amp;&amp; mRTBackend.startAnimation(this)) &#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       mView.setHasTransientState(true);</span><br><span class="line">       ValueAnimator animator = ValueAnimator.ofFloat(1.0f);</span><br><span class="line">       </span><br><span class="line">       // ... 省了部分代码</span><br><span class="line">       </span><br><span class="line">       animator.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>当调用start()方法后，还是会转化为Animator执行；</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> android-动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 动画（一）Animation]]></title>
      <url>/2018/12/15/android/android10/</url>
      <content type="html"><![CDATA[<p>在日常的Android开发中，我们可能经常会使用到动画，但是Android有哪些动画，它们有什么区别，我们也需要去了解。下面就对Android中常用的动画做一下总结。</p>
<blockquote>
<p>总的说来，Android中动画可分为两大类：<strong>传统动画(Animation)</strong>、<strong>属性动画(Animator)</strong>。</p>
</blockquote>
<p>这一篇文章主要总结传统动画，如果属性动画，可以点击下面链接。<br><strong><a href="https://huang2177.github.io/2018/12/20/android/android11">Android 动画（二）Animator</a>。</strong></p>
<p>或者想了解下插值器和估值器，可以点击下面链接。<br><strong><a href="https://huang2177.github.io/2018/12/21/android/android12">Android 动画（三）插值器和估值器</a>。</strong></p>
<h4 id="传统动画-Animation-分类"><a href="#传统动画-Animation-分类" class="headerlink" title="传统动画(Animation)分类"></a>传统动画(Animation)分类</h4><h5 id="帧动画（Frame-Animation）"><a href="#帧动画（Frame-Animation）" class="headerlink" title="帧动画（Frame Animation）"></a>帧动画（Frame Animation）</h5><p>帧动画是比较容易实现的一种动画。比较<font color="#0000FF">依赖UI资源</font>，它的原理就是<font color="#0000FF">将一张张图片连贯起来进行播放</font>，从而在视觉上产生动画的感觉。</p>
<p>在drawable文件夹下面创建 frame_anim1.xml文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;animation-list android:oneshot=&quot;true&quot; </span><br><span class="line">                xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;item android:drawable=&quot;@color/design_default_color_primary&quot;</span><br><span class="line">          android:duration=&quot;200&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item android:drawable=&quot;@color/design_default_color_primary_dark&quot;</span><br><span class="line">          android:duration=&quot;200&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item android:drawable=&quot;@color/colorAccent&quot;</span><br><span class="line">          android:duration=&quot;200&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--当然item内部也可以有其他节点--&gt;</span><br><span class="line">    &lt;!--&lt;item android:duration=&quot;200&quot;&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;shape&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;corners android:radius=&quot;2dp&quot;/&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;solid android:color=&quot;@color/colorAccent&quot;/&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/shape&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/item&gt;--&gt;</span><br><span class="line">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>oneshot参数说明：true表示动画只会执行一次，否则循环执行；</p>
</blockquote>
<p>在代码中添加到view：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imageView.setImageResource(R.drawable.frame_anim1);</span><br><span class="line">AnimationDrawable animationDrawable = (AnimationDrawable) imageView.getDrawable();</span><br><span class="line">animationDrawable.start();</span><br></pre></td></tr></table></figure></p>
<h5 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h5><p>补间动画又可以分为四种形式，分别是<strong>alpha</strong>（淡入淡出），<strong>translate</strong>（位移），<strong>scale</strong>（缩放大小），<strong>rotate</strong>（旋转）。</p>
<h6 id="xml的形式"><a href="#xml的形式" class="headerlink" title="xml的形式"></a>xml的形式</h6><p>补间动画的实现，一般会采用xml 文件的形式；会更容易书写和阅读，同时也更容易复用。</p>
<p>首先，在<strong>res/anim/</strong>文件夹下定义如下的动画实现方式：<br>alpha_anim.xml 动画实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:duration=&quot;1000&quot;</span><br><span class="line">    android:fromAlpha=&quot;1.0&quot;</span><br><span class="line">    android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span><br><span class="line">    android:toAlpha=&quot;0.0&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>scale_anim.xml 动画实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:duration=&quot;1000&quot;</span><br><span class="line">    android:fromXScale=&quot;0.0&quot;</span><br><span class="line">    android:fromYScale=&quot;0.0&quot;</span><br><span class="line">    android:pivotX=&quot;50%&quot;</span><br><span class="line">    android:pivotY=&quot;50%&quot;</span><br><span class="line">    android:toXScale=&quot;1.0&quot;</span><br><span class="line">    android:toYScale=&quot;1.0&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p>代码调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animation animation = AnimationUtils.loadAnimation(mContext, R.anim.alpha_anim);</span><br><span class="line">img = (ImageView) findViewById(R.id.img);</span><br><span class="line">img.startAnimation(animation);</span><br></pre></td></tr></table></figure></p>
<p>当然，也可以使用set将多个动画组合起来使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:interpolator=&quot;@[package:]anim/interpolator_resource&quot;</span><br><span class="line">    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;</span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:fromAlpha=&quot;float&quot;</span><br><span class="line">        android:toAlpha=&quot;float&quot; /&gt;</span><br><span class="line">    &lt;scale</span><br><span class="line">        android:fromXScale=&quot;float&quot;</span><br><span class="line">        android:toXScale=&quot;float&quot;</span><br><span class="line">        android:fromYScale=&quot;float&quot;</span><br><span class="line">        android:toYScale=&quot;float&quot;</span><br><span class="line">        android:pivotX=&quot;float&quot;</span><br><span class="line">        android:pivotY=&quot;float&quot; /&gt;</span><br><span class="line">    &lt;translate</span><br><span class="line">        android:fromXDelta=&quot;float&quot;</span><br><span class="line">        android:toXDelta=&quot;float&quot;</span><br><span class="line">        android:fromYDelta=&quot;float&quot;</span><br><span class="line">        android:toYDelta=&quot;float&quot; /&gt;</span><br><span class="line">    &lt;rotate</span><br><span class="line">        android:fromDegrees=&quot;float&quot;</span><br><span class="line">        android:toDegrees=&quot;float&quot;</span><br><span class="line">        android:pivotX=&quot;float&quot;</span><br><span class="line">        android:pivotY=&quot;float&quot; /&gt;</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>interpolator：插值器，决定了View的动画的变化方式，也就是动画的变化速率。<br>pivot 决定了当前动画执行的参考位置</p>
</blockquote>
<table>
<thead>
<tr>
<th>PivotX取值</th>
<th>含义   </th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>原点坐标加上 10px，作为起始点</td>
</tr>
<tr>
<td>10%</td>
<td>原点坐标加上自己宽度的 10%（即控件水平中心）作为起始点 </td>
</tr>
<tr>
<td>10%p</td>
<td>原点坐标加上父控件宽度的 10% 作为起始点 x 轴坐标 </td>
</tr>
</tbody>
</table>
<h6 id="代码形式"><a href="#代码形式" class="headerlink" title="代码形式"></a>代码形式</h6><p>有时候，动画的属性值可能需要动态的调整，这个时候使用xml 就不合适了，需要使用java代码实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">animation = new RotateAnimation(-deValue, deValue</span><br><span class="line">, Animation.RELATIVE_TO_SELF</span><br><span class="line">, pxValue</span><br><span class="line">, Animation.RELATIVE_TO_SELF</span><br><span class="line">, pyValue);</span><br><span class="line">animation.setDuration(timeValue);</span><br><span class="line"></span><br><span class="line">animation.setFillAfter(true); // 动画是否需要保持最后的状态，停留在最后一帧。</span><br><span class="line">animation.setRepeatCount(-1); // 动画的重复次数</span><br><span class="line">animation.setRepeatMode(Animation.REVERSE); // 重复方式</span><br><span class="line">img.startAnimation(animation);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以通过<strong>AnimationSet</strong>完成多个动画的组合使用。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> android-动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python爬取西刺的可用代理]]></title>
      <url>/2018/12/07/python/python02/</url>
      <content type="html"><![CDATA[<p><a href="http://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a><br>在使用python爬取网络数据时，网络需要设置代理服务器，防止目标网站对IP的限制。网站实现了众多可以使用的代理服务器，这里写了一个爬虫，爬取其中 国内高匿代理IP。</p>
<h4 id="通过代码把ip、端口爬到本地"><a href="#通过代码把ip、端口爬到本地" class="headerlink" title="通过代码把ip、端口爬到本地"></a>通过代码把ip、端口爬到本地</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import selenium.webdriver as web</span><br><span class="line"></span><br><span class="line">url = &apos;https://www.xicidaili.com/nn/&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_chrome():</span><br><span class="line">    _driver = web.Chrome(&apos;D:/pythonprojects/PythonTrain01/chromedriver.exe&apos;)</span><br><span class="line">    _driver.start_client()</span><br><span class="line">    return _driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_ip():</span><br><span class="line">    ips = []</span><br><span class="line">    td_sel = &apos;#ip_list &gt; tbody &gt; tr&apos;</span><br><span class="line">    tds = driver.find_elements_by_css_selector(td_sel)</span><br><span class="line">    for td in tds[1:]:</span><br><span class="line">        ip_sel = &apos;td:nth-child(2)&apos;</span><br><span class="line">        port_sel = &apos;td:nth-child(3)&apos;</span><br><span class="line">        ip = td.find_element_by_css_selector(ip_sel).text</span><br><span class="line">        port = td.find_element_by_css_selector(port_sel).text</span><br><span class="line">        ips.append(f&apos;&#123;ip&#125; : &#123;port&#125;&apos;)</span><br><span class="line">    return ips</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def save(ips):</span><br><span class="line">    ips = &apos;\n&apos;.join(ips) + &apos;\n&apos;</span><br><span class="line">    if os.path.exists(&apos;proxy.txt&apos;):</span><br><span class="line">        with open(&apos;proxy.txt&apos;, &apos;a&apos;) as f:</span><br><span class="line">            f.write(ips)</span><br><span class="line">    else:</span><br><span class="line">        with open(&apos;proxy.txt&apos;, &apos;w+&apos;) as f:</span><br><span class="line">            f.write(ips)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def find_next():</span><br><span class="line">    for i in range(1, 5):</span><br><span class="line">        driver.get(url + str(i))</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        save(get_ip())</span><br><span class="line">        print(f&apos;获取第&#123;i&#125;页数据&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver = start_chrome()</span><br><span class="line">find_next()</span><br></pre></td></tr></table></figure>
<h4 id="通过花刺筛选可用的代理"><a href="#通过花刺筛选可用的代理" class="headerlink" title="通过花刺筛选可用的代理"></a>通过花刺筛选可用的代理</h4><figure class="image-box">
                <img src="/2018/12/07/python/python02/花刺.png" alt="花刺" title class>
                <p>花刺</p>
            </figure>
<blockquote>
<p>使用方法：导入 -&gt; 验证全部 -&gt; 清除</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[urllib使用]]></title>
      <url>/2018/12/07/python/python01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>模拟浏览器发送请求的库，python自带。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">Python2</th>
<th style="text-align:center">Python3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">urllib</td>
<td style="text-align:center">urllib.request</td>
</tr>
<tr>
<td style="text-align:center">urllib2</td>
<td style="text-align:center">urllib.parse</td>
</tr>
</tbody>
</table>
<h4 id="urllib-requset"><a href="#urllib-requset" class="headerlink" title="urllib.requset"></a>urllib.requset</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response = req.urlopen(url) # 请求网络</span><br><span class="line">response的常见函数：</span><br><span class="line">  1、read()：读取相应内容，内容是二进制格式；</span><br><span class="line">  2、geturl()：获取请求的url；</span><br><span class="line">  3、getheaders()：获取头部信息；</span><br><span class="line">  4、getcode()：获取状态嘛；</span><br><span class="line">  5、readlines()：按行读取，一般很少使用；</span><br></pre></td></tr></table></figure>
<h4 id="urllib-parse"><a href="#urllib-parse" class="headerlink" title="urllib.parse"></a>urllib.parse</h4><h5 id="urllib-parse-quote"><a href="#urllib-parse-quote" class="headerlink" title="urllib.parse.quote"></a>urllib.parse.quote</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = urllib.parse.quote.(url) #编码</span><br><span class="line">ret = urllib.parse.unquote.(url) #解码</span><br></pre></td></tr></table></figure>
<h5 id="urllib-parse-urlencode"><a href="#urllib-parse-urlencode" class="headerlink" title="urllib.parse.urlencode"></a>urllib.parse.urlencode</h5><p>将参数进行编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.parse.urlencode(data) # 需要传递一个字典</span><br></pre></td></tr></table></figure></p>
<h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;&apos;user-Agent&apos; : &apos;&apos;&#125;</span><br><span class="line"># 构建请求对象（这实际上也是反爬的第一步，通过伪装自己的UA（user-agent）；）</span><br><span class="line">request = urllib.requset.Requset(url, header=headers)</span><br><span class="line"># 发送请求</span><br><span class="line">response = urllib.requset.urlopen(request)</span><br></pre></td></tr></table></figure>
<h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;&apos;user-agent&apos;: &apos;Huang&apos;&#125;</span><br><span class="line">data = &#123;&apos;name&apos;: &apos;Huang&apos;, &apos;age&apos;: &apos;26&apos;&#125;</span><br><span class="line"># 队请求的参数进行编码query = parse.urlencode(data)</span><br><span class="line">req = request.Request(&apos;http://www.baidu.com/&apos;, query, headers)</span><br><span class="line">response = request.urlopen(req)</span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>某些时候在模拟某个浏览器请求数据的时候，可能会出现接口报错的情况，那么有可能需要我们全部的请求参数，包括<strong>请求头</strong>全部都传过去，但是，有两个参数不能传：</p>
<ul>
<li>‘Content-Length’ : ‘120’#是内容长度，有时候会自动计算，但以防万一还是不要加；</li>
<li>‘Accept-Encoding’ : ‘gzip,deflate’ # 告诉服务需不需要压缩，一般已不需要加；</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 模块化、组件化的理解]]></title>
      <url>/2018/10/09/android/android09/</url>
      <content type="html"><![CDATA[<blockquote>
<p>不管是模块化还是组件化，都不是一个新的设计思想，它们很早就已经被提出了。但是早期的移动应用由于相对简单，本身逻辑功能也不多，所以在移动端的应用反而没那么广泛。</p>
</blockquote>
<h4 id="模块化-or-组件化"><a href="#模块化-or-组件化" class="headerlink" title="模块化 or 组件化"></a>模块化 or 组件化</h4><ul>
<li>从上面的概述来看其实组件化跟模块化没有明显的区别；</li>
<li>一个登录功能可以是一个模块也可以是一个组件，一个日期选择控件可以是一个模块，也可以是一个组件；</li>
<li>因为不管是模块化还是组件化，它们都有一个共同的目标：将一个大的软件系统细化成一个个模块或者组件，都是为了<strong>重用和解耦</strong>。</li>
<li>因此没有一个明确的界线去区分它们，只是 <strong>组件化较模块化粒度更小</strong>。</li>
</ul>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul>
<li>模块：<strong>侧重于功能</strong>，与业务无关，比如自定义控件、网络请求库、图片加载库等</li>
<li>组件：<strong>侧重于业务</strong>，可编译成单独的app，一般只负责单一业务，具备自身的生命周期（通常包含Android四大组件的一个或多个，所以称之为组件也更加贴切）</li>
</ul>
<h4 id="组件化框架"><a href="#组件化框架" class="headerlink" title="组件化框架"></a>组件化框架</h4><h5 id="面向接口"><a href="#面向接口" class="headerlink" title="面向接口"></a>面向接口</h5><ul>
<li>并不能真正的解耦；</li>
<li>内部生成映射表，这个映射表的数据结构通常是一个Map，Key是一个字符串，Value是一个类或者是类的路径名称；</li>
<li>用于通过<strong>反射进行类的实例化</strong>。</li>
</ul>
<h5 id="面向通信协议"><a href="#面向通信协议" class="headerlink" title="面向通信协议"></a>面向通信协议</h5><ul>
<li>可以真正的实现隔离；</li>
<li>基于事件总线的方式实现组件之间的通信，这些框架会在内部建立跨进程通信的连接（也就是事件总线），这条事件总线负责分发路由请求以及返回执行结果。</li>
<li>只支持基本类型参数的转发。</li>
</ul>
<h4 id="组件化演变过程"><a href="#组件化演变过程" class="headerlink" title="组件化演变过程"></a>组件化演变过程</h4><ul>
<li>从单工程项目过度到多模块的阶段；</li>
<li>从多模块过度到多组件的阶段；</li>
<li>多组件独立进程的阶段。<blockquote>
<p>而目前大多数应用其实都是在第二个阶段或者介于第二和第三个阶段之间，所以对于这样的项目，选择一个既支持类查找方式，又支持事件总线的组件化框架是最合适的。</p>
</blockquote>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> android-组件化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AndroidUI卡顿监控方案]]></title>
      <url>/2018/08/11/android/AndroidUI%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h4 id="监控原理"><a href="#监控原理" class="headerlink" title="监控原理"></a>监控原理</h4><p>系统中Looper的关键代码如下。我们知道，在一个应用进程中，只有一个MainLooper，而在loop()方法中可以看出，<strong>Printer logging = me.mLogging</strong>，它在每个message处理前后都会被调用。如果主线程卡主了，说明<strong>msg.target.dispatchMessage(msg)</strong>内部执行太耗时了。根据这个原理，可以做一个UI卡顿监控的方案。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">for (;;) &#123;</span><br><span class="line">    Message msg = queue.next(); // might block</span><br><span class="line">    // 省略部分代码...</span><br><span class="line">    // This must be in a local variable, in case a UI event sets the logger</span><br><span class="line">    final Printer logging = me.mLogging;</span><br><span class="line">    if (logging != null) &#123;</span><br><span class="line">        logging.println(&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot; + msg.target + &quot; &quot; +</span><br><span class="line">                msg.callback + &quot;: &quot; + msg.what);</span><br><span class="line">    &#125;</span><br><span class="line">    // 省略部分代码...</span><br><span class="line">       try &#123;</span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        end = (slowDispatchThresholdMs == 0) ? 0 : SystemClock.uptimeMillis();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (traceTag != 0) &#123;</span><br><span class="line">            Trace.traceEnd(traceTag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 省略部分代码...</span><br><span class="line">    if (logging != null) &#123;</span><br><span class="line">        logging.println(&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot; + msg.target + &quot; &quot; + msg.callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>所以，我们只要实现自己的Printer，并且调用<strong>Looper.getMainLooper().setMessagePrinter(mPrinter)</strong>就可以实现自己的监控逻辑了。</p>
<h5 id="卡顿监控"><a href="#卡顿监控" class="headerlink" title="卡顿监控"></a>卡顿监控</h5><p>LogPrinter关键代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class LogPrinter implements Printer,UiPerfMonitorConfig&#123;</span><br><span class="line">    private final String TAG = &quot;LogPrinter&quot;;</span><br><span class="line">    private LogPrinterListener mLogPrinter = null;</span><br><span class="line">    private long startTime;</span><br><span class="line">    </span><br><span class="line">    public LogPrinter(LogPrinterListener logPrinter)&#123;</span><br><span class="line">        mLogPrinter = logPrinter;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void println(String s)&#123;</span><br><span class="line">        //表示式dispatchMessage之前调用</span><br><span class="line">        if(startTime &lt;= 0)&#123; </span><br><span class="line">            startTime = System.currentTimeMills();</span><br><span class="line">            mLogPrinter.onStartLog();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            long diffTime = System.currentTimeMills() - startTime;</span><br><span class="line">            excuTime(s, diffTime);</span><br><span class="line">            startTime = 0;</span><br><span class="line">            mLogPrinter.onEndLog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void excuTime(String logInfo, long diffTime)&#123;</span><br><span class="line">        int level;</span><br><span class="line">        if(diffTime &gt; TIME_WARNING_LEVEL_2)&#123; </span><br><span class="line">            level = UI_PERF_LEVEL_2;</span><br><span class="line">        &#125;else if(diffTime &gt; TIME_WARNING_LEVEL_1)&#123;</span><br><span class="line">            level = UI_PERF_LEVEL_1;</span><br><span class="line">        &#125;</span><br><span class="line">        mLogPrinter.onEndLog(logInfo, level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>UiPerfMonitorConfig定义了相关常量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface UiPerfMonitorConfig&#123;</span><br><span class="line">    public final int UI_PERF_LEVEL_1 = 1;</span><br><span class="line">    public final int UI_PERF_LEVEL_2 = 2;</span><br><span class="line">    </span><br><span class="line">    public final long TIME_WARNING_LEVEL_1 = 100;</span><br><span class="line">    public final long TIME_WARNING_LEVEL_2 = 300;</span><br><span class="line">    </span><br><span class="line">    public final String LOG_PATH = Enviroment.getExternalStorageDirectory().getPath()</span><br><span class="line">    + &quot;androidtech/uiperf&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>开启/停止监控<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//开启</span><br><span class="line">Looper.getMainLooper().setMessagePrinter(mPrinter);</span><br><span class="line">//停止</span><br><span class="line">Looper.getMainLooper().setMessagePrinter(null);</span><br></pre></td></tr></table></figure></p>
<h5 id="获取相关数据"><a href="#获取相关数据" class="headerlink" title="获取相关数据"></a>获取相关数据</h5>]]></content>
      
        
        <tags>
            
            <tag> android-性能优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android 使用sharedpreferences 保存对象]]></title>
      <url>/2017/07/09/android/android08/</url>
      <content type="html"><![CDATA[<p>在手机的开发过程中我们可能需要存储对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class SharedUtil &#123;  </span><br><span class="line">    private final static String FILE_NAME = &quot;data_save&quot;; </span><br><span class="line">    private final static String KEY = &quot;data&quot;;  </span><br><span class="line"></span><br><span class="line">      /** </span><br><span class="line">       * desc:保存对象    </span><br><span class="line">       * @param context </span><br><span class="line">       * @param key  </span><br><span class="line">       * @param obj </span><br><span class="line">       * modified:   </span><br><span class="line">       */  </span><br><span class="line">      public static void saveObject(Context context,Object obj)&#123;  </span><br><span class="line">          try &#123;  </span><br><span class="line">              // 保存对象  </span><br><span class="line">              SharedPreferences.Editor sharedata = context.getSharedPreferences(FILENAME, 0).edit();  </span><br><span class="line">              //先将序列化结果写到byte缓存中，其实就分配一个内存空间  </span><br><span class="line">              ByteArrayOutputStream bos=new ByteArrayOutputStream();  </span><br><span class="line">              ObjectOutputStream os=new ObjectOutputStream(bos);  </span><br><span class="line">              //将对象序列化写入byte缓存  </span><br><span class="line">              os.writeObject(obj);  </span><br><span class="line">              //将序列化的数据转为16进制保存  </span><br><span class="line">              String bytesToHexString = bytesToHexString(bos.toByteArray());  </span><br><span class="line">              //保存该16进制数组  </span><br><span class="line">              sharedata.putString(KEY, bytesToHexString);  </span><br><span class="line">              sharedata.commit();  </span><br><span class="line">          &#125; catch (Exception e) &#123;                         </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      /** </span><br><span class="line">       * desc:将数组转为16进制 </span><br><span class="line">       * @param bArray </span><br><span class="line">       * @return </span><br><span class="line">       * modified:   </span><br><span class="line">       */  </span><br><span class="line">      public static String bytesToHexString(byte[] bArray) &#123;  </span><br><span class="line">          if(bArray == null)&#123;  </span><br><span class="line">              return null;  </span><br><span class="line">          &#125;  </span><br><span class="line">          if(bArray.length == 0)&#123;  </span><br><span class="line">              return &quot;&quot;;  </span><br><span class="line">          &#125;  </span><br><span class="line">          StringBuffer sb = new StringBuffer(bArray.length);  </span><br><span class="line">          String sTemp;  </span><br><span class="line">          for (int i = 0; i &lt; bArray.length; i++) &#123;  </span><br><span class="line">              sTemp = Integer.toHexString(0xFF &amp; bArray[i]);  </span><br><span class="line">              if (sTemp.length() &lt; 2)  </span><br><span class="line">                  sb.append(0);  </span><br><span class="line">              sb.append(sTemp.toUpperCase());  </span><br><span class="line">          &#125;  </span><br><span class="line">          return sb.toString();  </span><br><span class="line">      &#125;  </span><br><span class="line">      /** </span><br><span class="line">       * desc:获取保存的Object对象 </span><br><span class="line">       * @param context </span><br><span class="line">       * @param key </span><br><span class="line">       * @return </span><br><span class="line">       * modified:   </span><br><span class="line">       */  </span><br><span class="line">      public static Object readObject(Context context)&#123;  </span><br><span class="line">          try &#123;  </span><br><span class="line">              SharedPreferences sharedata = context.getSharedPreferences(FILENAME, 0);  </span><br><span class="line">              if (sharedata.contains(KEY)) &#123;  </span><br><span class="line">                   String string = sharedata.getString(KEY, &quot;&quot;);  </span><br><span class="line">                   if(TextUtils.isEmpty(string))&#123;  </span><br><span class="line">                       return null;  </span><br><span class="line">                   &#125;else&#123;  </span><br><span class="line">                       //将16进制的数据转为数组，准备反序列化  </span><br><span class="line">                       byte[] stringToBytes = StringToBytes(string);  </span><br><span class="line">                         ByteArrayInputStream bis=new ByteArrayInputStream(stringToBytes);  </span><br><span class="line">                         ObjectInputStream is=new ObjectInputStream(bis);  </span><br><span class="line">                         //返回反序列化得到的对象  </span><br><span class="line">                         Object readObject = is.readObject();  </span><br><span class="line">                         return readObject;  </span><br><span class="line">                   &#125;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; catch (Exception e) &#123;               </span><br><span class="line">          &#125;  </span><br><span class="line">          //所有异常返回null  </span><br><span class="line">          return null;  </span><br><span class="line"></span><br><span class="line">      &#125;  </span><br><span class="line">      /** </span><br><span class="line">       * desc:将16进制的数据转为数组 </span><br><span class="line">       * &lt;p&gt;创建人：聂旭阳 , 2014-5-25 上午11:08:33&lt;/p&gt; </span><br><span class="line">       * @param data </span><br><span class="line">       * @return </span><br><span class="line">       * modified:   </span><br><span class="line">       */  </span><br><span class="line">      public static byte[] StringToBytes(String data)&#123;  </span><br><span class="line">          String hexString=data.toUpperCase().trim();  </span><br><span class="line">          if (hexString.length()%2!=0) &#123;  </span><br><span class="line">              return null;  </span><br><span class="line">          &#125;  </span><br><span class="line">          byte[] retData=new byte[hexString.length()/2];  </span><br><span class="line">          for(int i=0;i&lt;hexString.length();i++)  </span><br><span class="line">          &#123;  </span><br><span class="line">              int int_ch;  // 两位16进制数转化后的10进制数  </span><br><span class="line">              char hex_char1 = hexString.charAt(i); ////两位16进制数中的第一位(高位*16)  </span><br><span class="line">              int int_ch3;  </span><br><span class="line">              if(hex_char1 &gt;= &apos;0&apos; &amp;&amp; hex_char1 &lt;=&apos;9&apos;)  </span><br><span class="line">                  int_ch3 = (hex_char1-48)*16;   //// 0 的Ascll - 48  </span><br><span class="line">              else if(hex_char1 &gt;= &apos;A&apos; &amp;&amp; hex_char1 &lt;=&apos;F&apos;)  </span><br><span class="line">                  int_ch3 = (hex_char1-55)*16; //// A 的Ascll - 65  </span><br><span class="line">              else  </span><br><span class="line">                  return null;  </span><br><span class="line">              i++;  </span><br><span class="line">              char hex_char2 = hexString.charAt(i); ///两位16进制数中的第二位(低位)  </span><br><span class="line">              int int_ch4;  </span><br><span class="line">              if(hex_char2 &gt;= &apos;0&apos; &amp;&amp; hex_char2 &lt;=&apos;9&apos;)  </span><br><span class="line">                  int_ch4 = (hex_char2-48); //// 0 的Ascll - 48  </span><br><span class="line">              else if(hex_char2 &gt;= &apos;A&apos; &amp;&amp; hex_char2 &lt;=&apos;F&apos;)  </span><br><span class="line">                  int_ch4 = hex_char2-55; //// A 的Ascll - 65  </span><br><span class="line">              else  </span><br><span class="line">                  return null;  </span><br><span class="line">              int_ch = int_ch3+int_ch4;  </span><br><span class="line">              retData[i/2]=(byte) int_ch;//将转化后的数放入Byte里  </span><br><span class="line">          &#125;  </span><br><span class="line">          return retData;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> android-其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android改变光标的颜色及样式]]></title>
      <url>/2017/06/17/android/android07/</url>
      <content type="html"><![CDATA[<p>有些时候为了和主体颜色保持一致，可能我们需要更换系统的输入法光标颜色；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;EditText</span><br><span class="line">            android:id=&quot;@+id/find_edit&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:background=&quot;@drawable/corner_titlebar&quot;</span><br><span class="line">            android:drawableLeft=&quot;@drawable/icon_search&quot;</span><br><span class="line">            android:hint=&quot;搜你想搜的&quot;</span><br><span class="line">            android:imeOptions=&quot;actionSearch&quot;</span><br><span class="line">            android:paddingLeft=&quot;5dp&quot;</span><br><span class="line">            android:singleLine=&quot;true&quot;</span><br><span class="line">            android:textColor=&quot;#3b3a3a&quot;</span><br><span class="line">            android:textCursorDrawable=&quot;@drawable/text_cursor_shape&quot;//设置光标颜色</span><br><span class="line">            android:textSelectHandle=&quot;@drawable/textselecthandle&quot; //设置光标拖动球的样式  UI给一张图片即可!</span><br><span class="line">            android:textSelectHandleLeft=&quot;@drawable/textselecthandle&quot;</span><br><span class="line">            android:textSelectHandleRight=&quot;@drawable/textselecthandle&quot;</span><br><span class="line">            android:textSize=&quot;14.0sp&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>在drawable文件夹下建立 text_cursor_shape：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:shape=&quot;rectangle&quot;&gt;</span><br><span class="line">    &lt;size android:width=&quot;2dp&quot; /&gt;</span><br><span class="line">    &lt;solid android:color=&quot;#494a49&quot; /&gt;</span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure>
<p>@column-3{</p>
<p>@card{</p>
<figure class="image-box">
                <img src="https://img-blog.csdn.net/20170717155713162?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhbmdicnlhbnQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="改变光标的颜色及样式" title class>
                <p>改变光标的颜色及样式</p>
            </figure>
<p>}</p>
<p>}</p>
]]></content>
      
        
        <tags>
            
            <tag> android-其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 实现不同通知栏]]></title>
      <url>/2017/05/27/android/android06/</url>
      <content type="html"><![CDATA[<h4 id="获取系统的通知管理器实例"><a href="#获取系统的通知管理器实例" class="headerlink" title="获取系统的通知管理器实例"></a>获取系统的通知管理器实例</h4><p><code>NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</code></p>
<ul>
<li><p>普通通知栏<br><img src="https://img-blog.csdn.net/20170717191856486?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhbmdicnlhbnQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="普通通知栏"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Notification.Builder builder=new Notification.Builder(this);</span><br><span class="line">          Intent intent=new Intent(Intent.ACTION_VIEW, Uri.parse(&quot;http://www.jianshu.com/p/82e249713f1b&quot;));</span><br><span class="line">          PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,0);</span><br><span class="line">          builder.setContentIntent(pendingIntent);</span><br><span class="line">          builder.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class="line">          builder.setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));</span><br><span class="line">          builder.setAutoCancel(true);</span><br><span class="line">          builder.setContentTitle(&quot;普通通知栏&quot;);</span><br><span class="line">          mNotificationManager.notify(1, builder.build());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>自定义布局通知栏<br><img src="https://img-blog.csdn.net/20170717192426967?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhbmdicnlhbnQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="自定义布局通知栏"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">notification.bigContentView=remoteViews;</span><br><span class="line">notification.contentView=remoteViews;</span><br><span class="line">Notification.Builder builder2=new Notification.Builder(this);</span><br><span class="line">          Intent intent2=new Intent(Intent.ACTION_VIEW, Uri.parse(&quot;http://www.jianshu.com/p/82e249713f1b&quot;));</span><br><span class="line">          PendingIntent pendingIntent2=PendingIntent.getActivity(this,0,intent2,0);</span><br><span class="line">          builder2.setContentIntent(pendingIntent2);</span><br><span class="line">          builder2.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class="line">          builder2.setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));</span><br><span class="line">          builder2.setAutoCancel(true);</span><br><span class="line">          builder2.setContentTitle(&quot;折叠通知&quot;);</span><br><span class="line">          RemoteViews remoteViews=new RemoteViews(getPackageName(),R.layout.layout_view);</span><br><span class="line">          Notification  notification=builder2.build();</span><br><span class="line">          notification.bigContentView=remoteViews;</span><br><span class="line">          mNotificationManager.notify(1,notification);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> android-其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android 7.0以后的popouwindow弹出问题]]></title>
      <url>/2017/05/22/android/android03/</url>
      <content type="html"><![CDATA[<h2 id="android-7-0以后的popouwindow弹出问题"><a href="#android-7-0以后的popouwindow弹出问题" class="headerlink" title="android 7.0以后的popouwindow弹出问题"></a>android 7.0以后的popouwindow弹出问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class CustomPopupWindow extends PopupWindow &#123;</span><br><span class="line">    public CustomPopupWindow(View contentView, int width, int height)&#123;</span><br><span class="line">        super(contentView,width,height);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void showAsDropDown(View anchor) &#123;</span><br><span class="line">        if(Build.VERSION.SDK_INT &gt;= 24) &#123;</span><br><span class="line">            Rect rect = new Rect();</span><br><span class="line">            anchor.getGlobalVisibleRect(rect);</span><br><span class="line">            int h = anchor.getResources().getDisplayMetrics().heightPixels - rect.bottom;</span><br><span class="line">            setHeight(h);</span><br><span class="line">        &#125;</span><br><span class="line">        super.showAsDropDown(anchor);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void showAsDropDown(View anchor, int xoff, int yoff) &#123;</span><br><span class="line">        if(Build.VERSION.SDK_INT == 24) &#123;</span><br><span class="line">            Rect rect = new Rect();</span><br><span class="line">            anchor.getGlobalVisibleRect(rect);</span><br><span class="line">            int h = anchor.getResources().getDisplayMetrics().heightPixels - rect.bottom;</span><br><span class="line">            setHeight(h);</span><br><span class="line">    &#125;</span><br><span class="line">        super.showAsDropDown(anchor, xoff, yoff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> android-其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件操作、Android清除缓存]]></title>
      <url>/2017/05/08/android/android05/</url>
      <content type="html"><![CDATA[<h4 id="文件操作的工具类"><a href="#文件操作的工具类" class="headerlink" title="文件操作的工具类"></a>文件操作的工具类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line">public class SDCardHelper &#123;</span><br><span class="line">    // 判断SD卡是否被挂载</span><br><span class="line">    public static boolean isSDCardMounted() &#123;</span><br><span class="line">        // return Environment.getExternalStorageState().equals(&quot;mounted&quot;);</span><br><span class="line">        return Environment.getExternalStorageState().equals(</span><br><span class="line">                Environment.MEDIA_MOUNTED);</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取SD卡的根目录</span><br><span class="line">    public static String getSDCardBaseDir() &#123;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            return Environment.getExternalStorageDirectory().getAbsolutePath();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取SD卡的完整空间大小，返回MB</span><br><span class="line">    public static long getSDCardSize() &#123;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            StatFs fs = new StatFs(getSDCardBaseDir());</span><br><span class="line">            long count = fs.getBlockCountLong();</span><br><span class="line">            long size = fs.getBlockSizeLong();</span><br><span class="line">            return count * size / 1024 / 1024;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取SD卡的剩余空间大小</span><br><span class="line">    public static long getSDCardFreeSize() &#123;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            StatFs fs = new StatFs(getSDCardBaseDir());</span><br><span class="line">            long count = fs.getFreeBlocksLong();</span><br><span class="line">            long size = fs.getBlockSizeLong();</span><br><span class="line">            return count * size / 1024 / 1024;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取SD卡的可用空间大小</span><br><span class="line">    public static long getSDCardAvailableSize() &#123;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            StatFs fs = new StatFs(getSDCardBaseDir());</span><br><span class="line">            long count = fs.getAvailableBlocksLong();</span><br><span class="line">            long size = fs.getBlockSizeLong();</span><br><span class="line">            return count * size / 1024 / 1024;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    // 往SD卡的公有目录下保存文件</span><br><span class="line">    public static boolean saveFileToSDCardPublicDir(byte[] data, String type,</span><br><span class="line">            String fileName) &#123;</span><br><span class="line">        BufferedOutputStream bos = null;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            File file = Environment.getExternalStoragePublicDirectory(type);</span><br><span class="line">            try &#123;</span><br><span class="line">                bos = new BufferedOutputStream(new FileOutputStream(new File(</span><br><span class="line">                        file, fileName)));</span><br><span class="line">                bos.write(data);</span><br><span class="line">                bos.flush();</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    // TODO Auto-generated catch block</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 往SD卡的自定义目录下保存文件</span><br><span class="line">    public static boolean saveFileToSDCardCustomDir(byte[] data, String dir,</span><br><span class="line">            String fileName) &#123;</span><br><span class="line">        BufferedOutputStream bos = null;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            File file = new File(getSDCardBaseDir() + File.separator + dir);</span><br><span class="line">            if (!file.exists()) &#123;</span><br><span class="line">                file.mkdirs();// 递归创建自定义目录</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                bos = new BufferedOutputStream(new FileOutputStream(new File(</span><br><span class="line">                        file, fileName)));</span><br><span class="line">                bos.write(data);</span><br><span class="line">                bos.flush();</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    // TODO Auto-generated catch block</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 往SD卡的私有Files目录下保存文件</span><br><span class="line">    public static boolean saveFileToSDCardPrivateFilesDir(byte[] data,</span><br><span class="line">            String type, String fileName, Context context) &#123;</span><br><span class="line">        BufferedOutputStream bos = null;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            File file = context.getExternalFilesDir(type);</span><br><span class="line">            try &#123;</span><br><span class="line">                bos = new BufferedOutputStream(new FileOutputStream(new File(</span><br><span class="line">                        file, fileName)));</span><br><span class="line">                bos.write(data);</span><br><span class="line">                bos.flush();</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    // TODO Auto-generated catch block</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 往SD卡的私有Cache目录下保存文件</span><br><span class="line">    public static boolean saveFileToSDCardPrivateCacheDir(byte[] data,</span><br><span class="line">            String fileName, Context context) &#123;</span><br><span class="line">        BufferedOutputStream bos = null;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            File file = context.getExternalCacheDir();</span><br><span class="line">            try &#123;</span><br><span class="line">                bos = new BufferedOutputStream(new FileOutputStream(new File(</span><br><span class="line">                        file, fileName)));</span><br><span class="line">                bos.write(data);</span><br><span class="line">                bos.flush();</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    // TODO Auto-generated catch block</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 保存bitmap图片到SDCard的私有Cache目录</span><br><span class="line">    public static boolean saveBitmapToSDCardPrivateCacheDir(Bitmap bitmap,</span><br><span class="line">            String fileName, Context context) &#123;</span><br><span class="line">        if (isSDCardMounted()) &#123;</span><br><span class="line">            BufferedOutputStream bos = null;</span><br><span class="line">            // 获取私有的Cache缓存目录</span><br><span class="line">            File file = context.getExternalCacheDir();</span><br><span class="line">            try &#123;</span><br><span class="line">                bos = new BufferedOutputStream(new FileOutputStream(new File(</span><br><span class="line">                        file, fileName)));</span><br><span class="line">                if (fileName != null</span><br><span class="line">                        &amp;&amp; (fileName.contains(&quot;.png&quot;) || fileName</span><br><span class="line">                                .contains(&quot;.PNG&quot;))) &#123;</span><br><span class="line">                    bitmap.compress(Bitmap.CompressFormat.PNG, 100, bos);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, bos);</span><br><span class="line">                &#125;</span><br><span class="line">                bos.flush();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (bos != null) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        bos.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 从SD卡获取文件</span><br><span class="line">    public static byte[] loadFileFromSDCard(String fileDir) &#123;</span><br><span class="line">        BufferedInputStream bis = null;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        try &#123;</span><br><span class="line">            bis = new BufferedInputStream(</span><br><span class="line">                    new FileInputStream(new File(fileDir)));</span><br><span class="line">            byte[] buffer = new byte[8 * 1024];</span><br><span class="line">            int c = 0;</span><br><span class="line">            while ((c = bis.read(buffer)) != -1) &#123;</span><br><span class="line">                baos.write(buffer, 0, c);</span><br><span class="line">                baos.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            return baos.toByteArray();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                baos.close();</span><br><span class="line">                bis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    // 从SDCard中寻找指定目录下的文件，返回Bitmap</span><br><span class="line">    public Bitmap loadBitmapFromSDCard(String filePath) &#123;</span><br><span class="line">        byte[] data = loadFileFromSDCard(filePath);</span><br><span class="line">        if (data != null) &#123;</span><br><span class="line">            Bitmap bm = BitmapFactory.decodeByteArray(data, 0, data.length);</span><br><span class="line">            if (bm != null) &#123;</span><br><span class="line">                return bm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取SD卡公有目录的路径</span><br><span class="line">    public static String getSDCardPublicDir(String type) &#123;</span><br><span class="line">        return Environment.getExternalStoragePublicDirectory(type).toString();</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取SD卡私有Cache目录的路径</span><br><span class="line">    public static String getSDCardPrivateCacheDir(Context context) &#123;</span><br><span class="line">        return context.getExternalCacheDir().getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取SD卡私有Files目录的路径</span><br><span class="line">    public static String getSDCardPrivateFilesDir(Context context, String type) &#123;</span><br><span class="line">        return context.getExternalFilesDir(type).getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line">    public static boolean isFileExist(String filePath) &#123;</span><br><span class="line">        File file = new File(filePath);</span><br><span class="line">        return file.isFile();</span><br><span class="line">    &#125;</span><br><span class="line">    // 从sdcard中删除文件</span><br><span class="line">    public static boolean removeFileFromSDCard(String filePath) &#123;</span><br><span class="line">        File file = new File(filePath);</span><br><span class="line">        if (file.exists()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Android-清除缓存的方法"><a href="#Android-清除缓存的方法" class="headerlink" title="Android 清除缓存的方法"></a>Android 清除缓存的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">//获取缓存大小</span><br><span class="line"></span><br><span class="line">public  String getTotalCacheSize() &#123;</span><br><span class="line">        long cacheSize = getFileSize(getCacheDir());</span><br><span class="line">        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">            cacheSize += getFileSize(getExternalCacheDir());</span><br><span class="line">        &#125;</span><br><span class="line">        return getFormatSize(cacheSize);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取指定文件大小</span><br><span class="line">     *</span><br><span class="line">     * @param</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public long getFileSize(File file) &#123;</span><br><span class="line">        long size = 0;</span><br><span class="line">        try &#123;</span><br><span class="line">            File[] fileList = file.listFiles();</span><br><span class="line">            int size2 = 0;</span><br><span class="line">            if (fileList != null) &#123;</span><br><span class="line">                size2 = fileList.length;</span><br><span class="line">                for (int i = 0; i &lt; size2; i++) &#123;</span><br><span class="line">                    // 如果下面还有文件</span><br><span class="line">                    if (fileList[i].isDirectory()) &#123;</span><br><span class="line">                        size = size + getFileSize(fileList[i]);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        size = size + fileList[i].length();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getFormatSize(double size) &#123;</span><br><span class="line">        double kiloByte = size / 1024;</span><br><span class="line">        if (kiloByte &lt; 1) &#123;</span><br><span class="line">            // return size + &quot;Byte&quot;;</span><br><span class="line">            return &quot;0K&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        double megaByte = kiloByte / 1024;</span><br><span class="line">        if (megaByte &lt; 1) &#123;</span><br><span class="line">            BigDecimal result1 = new BigDecimal(Double.toString(kiloByte));</span><br><span class="line">            return result1.setScale(2, BigDecimal.ROUND_HALF_UP)</span><br><span class="line">                    .toPlainString() + &quot;KB&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        double gigaByte = megaByte / 1024;</span><br><span class="line">        if (gigaByte &lt; 1) &#123;</span><br><span class="line">            BigDecimal result2 = new BigDecimal(Double.toString(megaByte));</span><br><span class="line">            return result2.setScale(2, BigDecimal.ROUND_HALF_UP)</span><br><span class="line">                    .toPlainString() + &quot;MB&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        double teraBytes = gigaByte / 1024;</span><br><span class="line">        if (teraBytes &lt; 1) &#123;</span><br><span class="line">            BigDecimal result3 = new BigDecimal(Double.toString(gigaByte));</span><br><span class="line">            return result3.setScale(2, BigDecimal.ROUND_HALF_UP)</span><br><span class="line">                    .toPlainString() + &quot;GB&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal result4 = new BigDecimal(teraBytes);</span><br><span class="line">        return result4.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString()</span><br><span class="line">                + &quot;TB&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">     * @param context</span><br><span class="line">     *            删除缓存</span><br><span class="line">     */</span><br><span class="line">    public static void clearAllCache(Context context) &#123;</span><br><span class="line">        deleteDir(context.getCacheDir());</span><br><span class="line">        if (Environment.getExternalStorageState().equals(</span><br><span class="line">                Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">            deleteDir(context.getExternalCacheDir());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private static boolean deleteDir(File dir) &#123;</span><br><span class="line">        if (dir != null &amp;&amp; dir.isDirectory()) &#123;</span><br><span class="line">            String[] children = dir.list();</span><br><span class="line">            int size = 0;</span><br><span class="line">            if (children != null) &#123;</span><br><span class="line">                size = children.length;</span><br><span class="line">                for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">                    boolean success = deleteDir(new File(dir, children[i]));</span><br><span class="line">                    if (!success) &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (dir == null) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return dir.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> android-其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中常用的图片压缩方式]]></title>
      <url>/2017/04/29/android/android04/</url>
      <content type="html"><![CDATA[<p>图片压缩方式常用的有尺寸压缩、质量压缩、格式变化以及通过JNI调用libjpeg库来进行压缩，下面就先分别介绍下常见的质量压缩和尺寸压缩。（尺寸压缩，质量压缩底层也是通过调用native的方法进行压缩的，而native中的则是通过Skia这个库实现的，但是，最终还是调用了libjpeg库进行压缩的。）</p>
<h4 id="格式变化"><a href="#格式变化" class="headerlink" title="格式变化"></a>格式变化</h4><p>现在android支持的图片格式有三种：png、jpeg、webp； </p>
<ul>
<li>png： 无损图片的压缩类型，能保存透明等图，它同时提供 24位和48位真彩色图像支持以及其他诸多技术性支持。 </li>
<li>Jpeg：有损图片的压缩类型，有损压缩方式去除冗余的图像和彩色数据，获取得极高的压缩率的同时能展现十分丰富生动的图像，换句话说，就是可以用最少的磁盘空间得到较好的图像质量。但是，bitmap quality属性越小，图片的清晰度越差。 </li>
<li>WebP：WebP（发音 weppy，项目主页），是谷歌推出的一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。</li>
</ul>
<h4 id="质量压缩"><a href="#质量压缩" class="headerlink" title="质量压缩"></a>质量压缩</h4><p>设置bitmap quality属性，降低图片的质量，像素不会减少（就是指bitmap所占的内存大小），第一个参数为需要压缩的bitmap图片对象，第二个参数为压缩后图片保存的位置设置quality属性0-100，来实现压缩。（因为png是无损压缩，所以该属性对png是无效的。）</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">/**</span><br><span class="line"> * 质量压缩</span><br><span class="line"> *</span><br><span class="line"> * @param format  图片格式   PNG，JPEG，WEBP</span><br><span class="line"> * @param quality 图片的质量 1-100</span><br><span class="line"> */</span><br><span class="line">public void compress(Bitmap.CompressFormat format, int quality) &#123;</span><br><span class="line">    FileOutputStream fos = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        //得到一个储存路径</span><br><span class="line">        File file = new File(Environment.getExternalStorageDirectory(), &quot;test.jpg&quot;);</span><br><span class="line">        //得到一个文件输入流</span><br><span class="line">        fos = new FileOutputStream(file);</span><br><span class="line">        //开始压缩</span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.default_icon);</span><br><span class="line">        bitmap.compress(format, quality, fos);</span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (fos != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>   
<h4 id="尺寸压缩"><a href="#尺寸压缩" class="headerlink" title="尺寸压缩"></a>尺寸压缩</h4><p>尺寸压缩由于是减小了图片的像素，所以它直接对bitmap产生了影响，当然最终生成的file文件也是相对的变小了；</p>
<ul>
<li><p>通过缩放图片像素来减少图片占用内存大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">public static void compressBitmapToFile(Bitmap bmp, File file)&#123;</span><br><span class="line">    // 尺寸压缩倍数,值越大，图片尺寸越小</span><br><span class="line">    int ratio = 2;</span><br><span class="line">    // 压缩Bitmap到对应尺寸</span><br><span class="line">    Bitmap result = Bitmap.createBitmap(bmp.getWidth() / ratio</span><br><span class="line">    , bmp.getHeight() / ratio</span><br><span class="line">    , Config.ARGB_8888);</span><br><span class="line">    Canvas canvas = new Canvas(result);</span><br><span class="line">    Rect rect = new Rect(0, 0, bmp.getWidth() / ratio, bmp.getHeight() / ratio);</span><br><span class="line">    canvas.drawBitmap(bmp, null, rect, null);</span><br><span class="line">    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">    // 把压缩后的数据存放到baos中</span><br><span class="line">    result.compress(Bitmap.CompressFormat.JPEG, 100 ,baos);</span><br><span class="line">    try &#123;  </span><br><span class="line">        FileOutputStream fos = new FileOutputStream(file);  </span><br><span class="line">        fos.write(baos.toByteArray());  </span><br><span class="line">        fos.flush();  </span><br><span class="line">        fos.close();  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   
</li>
<li><p>设置图片的采样率，降低图片像素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">public static void compressBitmap(String filePath, File file)&#123;</span><br><span class="line">    // 数值越高，图片像素越低</span><br><span class="line">    int inSampleSize = 2;</span><br><span class="line">    BitmapFactory.Options options = new BitmapFactory.Options();</span><br><span class="line">    //采样率</span><br><span class="line">    options.inSampleSize = inSampleSize;</span><br><span class="line">    Bitmap bitmap = BitmapFactory.decodeFile(filePath, options);  </span><br><span class="line">    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">    // 把压缩后的数据存放到baos中</span><br><span class="line">    bitmap.compress(Bitmap.CompressFormat.JPEG, 100 ,baos);</span><br><span class="line">    try &#123;  </span><br><span class="line">        FileOutputStream fos = new FileOutputStream(file);  </span><br><span class="line">        fos.write(baos.toByteArray());  </span><br><span class="line">        fos.flush();  </span><br><span class="line">        fos.close();  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> android-其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PopouWindow弹出动画]]></title>
      <url>/2017/04/12/android/android02/</url>
      <content type="html"><![CDATA[<h3 id="进入屏幕的动画anim-in-xml"><a href="#进入屏幕的动画anim-in-xml" class="headerlink" title="进入屏幕的动画anim_in.xml"></a>进入屏幕的动画anim_in.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">       android:duration=&quot;300&quot;</span><br><span class="line">       android:fromXScale=&quot;0.0&quot;</span><br><span class="line">       android:fromYScale=&quot;0.0&quot;</span><br><span class="line">       android:pivotX=&quot;50&quot;</span><br><span class="line">       android:pivotY=&quot;50&quot;</span><br><span class="line">       android:toXScale=&quot;1.0&quot;</span><br><span class="line">       android:toYScale=&quot;1.0&quot;/&gt;</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
<h3 id="进入屏幕的动画anim-in-xml-1"><a href="#进入屏幕的动画anim-in-xml-1" class="headerlink" title="进入屏幕的动画anim_in.xml"></a>进入屏幕的动画anim_in.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">       android:duration=&quot;300&quot;</span><br><span class="line">       android:fromXScale=&quot;0.0&quot;</span><br><span class="line">       android:fromYScale=&quot;0.0&quot;</span><br><span class="line">       android:pivotX=&quot;50&quot;</span><br><span class="line">       android:pivotY=&quot;50&quot;</span><br><span class="line">       android:toXScale=&quot;1.0&quot;</span><br><span class="line">       android:toYScale=&quot;1.0&quot;/&gt;</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
<h3 id="建立样式-myanimstyle"><a href="#建立样式-myanimstyle" class="headerlink" title="建立样式 myanimstyle"></a>建立样式 myanimstyle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style name=&quot;my_anim_popou&quot; parent=&quot;@android:style/Animation&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:windowEnterAnimation&quot;&gt;@anim/myanim_popou_out&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:windowExitAnimation&quot;&gt;@anim/myanim_popou_in&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="在代码中设置"><a href="#在代码中设置" class="headerlink" title="在代码中设置"></a>在代码中设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dialogWindow.setWindowAnimations(R.style.my_anim_out_in); // 添加动画</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="https://img-blog.csdn.net/20170822100030874?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhbmdicnlhbnQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="popouwindow弹出动画" title class>
                <p>popouwindow弹出动画</p>
            </figure>
]]></content>
      
        
        <tags>
            
            <tag> android-动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android中的单例模式]]></title>
      <url>/2017/03/25/android/android01/</url>
      <content type="html"><![CDATA[<h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>优点：在需要的时候才去加载<br>缺点：在多线程的环境下，会出现线性不安全的情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance = null;  </span><br><span class="line">    private Singleton() &#123;  </span><br><span class="line">    &#125;    </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">          &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>优点：饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的</p>
<p>//饿汉式单例类.在类初始化时，已经自行实例化<br>public class Singleton {<br>    //static修饰的静态变量在内存中一旦创建，便永久存在<br>    private static Singleton instance = new Singleton();<br>    private Singleton (){}<br>    public static Singleton getInstance() {<br>    return instance;<br>    }<br>} </p>
<h4 id="加双重锁"><a href="#加双重锁" class="headerlink" title="加双重锁"></a>加双重锁</h4><p>优点：在并发量不高、安全性不高的情况下可以很好的运行<br>缺点：在不同的编译环境下可能出现不同的问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">publci static synchronized Singleton getInstance()&#123;</span><br><span class="line">    if(instance == null)&#123;</span><br><span class="line">        synchronized(Object)&#123;</span><br><span class="line">            if(instance == null)&#123;</span><br><span class="line">                instance = new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>优点：延迟加载、线性安全、减少内存消耗</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    /** </span><br><span class="line">     * 私有的构造器</span><br><span class="line">     */  </span><br><span class="line">    private Singleton() &#123;  </span><br><span class="line">    &#125; </span><br><span class="line">    /** </span><br><span class="line">     * 内部类实现单例模式 </span><br><span class="line">     * 延迟加载，减少内存开销 </span><br><span class="line">     *  </span><br><span class="line">     */  </span><br><span class="line">    private static class SingletonInner &#123;  </span><br><span class="line">        private static Singleton instance = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        return SingletonInner.instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> android-其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql优化]]></title>
      <url>/2017/03/07/mysql/mysql05/</url>
      <content type="html"><![CDATA[<h2 id="sql优化原则："><a href="#sql优化原则：" class="headerlink" title="sql优化原则："></a>sql优化原则：</h2><ul>
<li><p>选择需要优化的SQL，不是所有的SQL都需要优化在优化的过程中,首选更要优化的SQL;</p>
<p><strong>怎么选择？</strong></p>
<ul>
<li>1小时谓求1W次，1次10个10；</li>
<li>1小时请求10次，1次1W个10；</li>
</ul>
<p><strong>思考：</strong></p>
<ul>
<li>从里位时间产生的IO来说，是相同的；<br>针对第一个SQL如累我能把lO个IO变成7个IO，一小时滅少3W个IO；<br>针对第二个SQL如果能把1W个IO变成7K个IO，—小时滅少3W个10；</li>
<li>从优化难度上1W-&gt;7K难的多；</li>
<li>从整体性能上来说第一个SQL的优化能够极大的提升系统整体的性能，第二个SQL慢一点,无非也就是SlO个连接査询慢一点；</li>
</ul>
</li>
<li>定位性能瓶SQL<ul>
<li>SQL运行较慢有两个原因，IO和CPU，明确性能瓶颈所在；</li>
<li>明确优化目标；</li>
<li>优先选择优化高并发低消耗的sql。</li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[查看mysql的执行计划（explain ）和执行明细状态（profiling）]]></title>
      <url>/2017/03/04/mysql/mysql04/</url>
      <content type="html"><![CDATA[<h1 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h1><p> 能够看到mysql在执行一条sql的时候所选择的执行计划；</p>
<blockquote>
<p>explain [需要执行的sql语句]</p>
</blockquote>
<p><strong>table</strong>：表名<br><strong>id</strong>：SELECT识别符。这是SELECT的查询序列号。<br><strong>select_type</strong>：SELECT类型。</p>
<ul>
<li>SIMPLE： 简单SELECT(不使用UNION或子查询)</li>
<li>PRIMARY： 最外面的SELECT</li>
<li>UNION：UNION中的第二个或后面的SELECT语句</li>
<li>DEPENDENT UNION：UNION中的第二个或后面的SELECT语句，取决于外面的查询</li>
<li>UNION RESULT：UNION的结果</li>
<li>SUBQUERY：子查询中的第一个SELECT</li>
<li>DEPENDENT SUBQUERY：子查询中的第一个SELECT，取决于外面的查询</li>
<li>DERIVED：导出表的SELECT(FROM子句的子查询)</li>
</ul>
<p><strong>type</strong>：联接类型</p>
<ul>
<li>system：表仅有一行(=系统表)。这是const联接类型的一个特例。</li>
<li>const：表最多有一个匹配行，它将在查询开始时被读取。因为仅有一行，在这行的列值可被优化器剩余部分认为是常数。const用于用常数值比较PRIMARY KEY或UNIQUE索引的所有部分时。</li>
<li>eq_ref：对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型。它用在一个索引的所有部分被联接使用并且索引是UNIQUE或PRIMARY KEY。eq_ref可以用于使用= 操作符比较的带索引的列。比较值可以为常量或一个使用在该表前面所读取的表的列的表达式。</li>
<li>ref：简单来说，就是表示该sql使用了索引；</li>
<li>ref_or_null：该联接类型如同ref，但是添加了MySQL可以专门搜索包含NULL值的行。在解决子查询中经常使用该联接类型的优化。</li>
<li>index_merge：该联接类型表示使用了索引合并优化方法。在这种情况下，key列包含了使用的索引的清单，key_len包含了使用的索引的最长的关键元素。</li>
<li>unique_subquery：该类型替换了下面形式的IN子查询的ref：value IN (SELECT primary_key FROMsingle_table WHERE some_expr);unique_subquery是一个索引查找函数，可以完全替换子查询，效率更高。</li>
<li>index_subquery：该联接类型类似于unique_subquery。可以替换IN子查询，但只适合下列形式的子查询中的非唯一索引：value IN (SELECT key_column FROM single_table WHERE some_expr)</li>
<li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。key_len包含所使用索引的最长关键元素。在该类型中ref列为NULL。当使用=、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS NULL、&lt;=&gt;、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range</li>
<li>index：该联接类型与ALL相同，除了只有索引树被扫描。这通常比ALL快，因为索引文件通常比数据文件小。</li>
<li>all：全表扫描。</li>
</ul>
<p><strong>possible_keys</strong>：possible_keys列指出MySQL能使用哪个索引在该表中找到行。<br><strong>key</strong>：key列显示MySQL实际决定使用的键(索引)。如果没有选择索引，键是NULL。<br><strong>key_len</strong>：key_len列显示MySQL决定使用的键长度。如果键是NULL，则长度为NULL。注意通过key_len值我们可以确定MySQL将实际使用一个多部关键字的几个部分。<br><strong>ref</strong>：sql过滤的方式，const（常量）、column（列）、fun（函数）。<br><strong>rows</strong>：rows列显示MySQL认为它执行查询时必须检查的行数。<br><strong>Extra</strong>：该列包含MySQL解决查询的详细信息。</p>
<ul>
<li>Distinct：MySQL发现第1个匹配行后，停止为当前的行组合搜索更多的行。</li>
<li>Not exists：MySQL能够对查询进行LEFT JOIN优化，发现1个匹配LEFT JOIN标准的行后，不再为前面的的行组合在该表内检查更多的行。</li>
<li>range checked for each record (index map: #)：MySQL没有发现好的可以使用的索引，但发现如果来自前面的表的列值已知，可能部分索引可以使用。对前面的表的每个行组合，MySQL检查是否可以使用range或index_merge访问方法来索取行。</li>
<li>Using filesort：MySQL需要额外的一次传递，以找出如何按排序顺序检索行。通过根据联接类型浏览所有行并为所有匹配WHERE子句的行保存排序关键字和行的指针来完成排序。然后关键字被排序，并按排序顺序检索行。</li>
<li>Using index：从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。当查询只使用作为单一索引一部分的列时，可以使用该策略。</li>
<li>Using temporary：为了解决查询，MySQL需要创建一个临时表来容纳结果。典型情况如查询包含可以按不同情况列出列的GROUP BY和ORDER BY子句时。</li>
<li>Using where：WHERE子句用于限制哪一个行匹配下一个表或发送到客户。除非你专门从表中索取或检查所有行，如果Extra值不为Using where并且表联接类型为ALL或index，查询可能会有一些错误。</li>
<li>Using sort_union(…), Using union(…), Using intersect(…)：这些函数说明如何为index_merge联接类型合并索引扫描。</li>
<li>Using index for group-by：类似于访问表的Using index方式，Using index for group-by表示MySQL发现了一个索引，可以用来查询GROUP BY或DISTINCT查询的所有列，而不要额外搜索硬盘访问实际的表。并且，按最有效的方式使用索引，以便对于每个组，只读取少量索引条目。</li>
</ul>
<h1 id="profiling"><a href="#profiling" class="headerlink" title="profiling"></a>profiling</h1><p>可以准确定位一条sq真正的性能瓶颈；</p>
<blockquote>
<p>set profiling=1;<br>         执行sql；<br>         set profiling=0；<br>         show profiles；<br>         show profile for query =1；</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql索引]]></title>
      <url>/2017/02/27/mysql/mysql03/</url>
      <content type="html"><![CDATA[<h2 id="索引的过程（实际上group-by也是会经历这样一个过程）"><a href="#索引的过程（实际上group-by也是会经历这样一个过程）" class="headerlink" title="索引的过程（实际上group by也是会经历这样一个过程）"></a>索引的过程（实际上group by也是会经历这样一个过程）</h2><p>@card{</p>
<figure class="image-box">
                <img src="https://app.yinxiang.com/shard/s54/res/e1d2aeff-81a8-4dd8-abe3-ddd9041026c2/TIM%E5%9B%BE%E7%89%8720181213141725.png" alt="索引的过程" title class>
                <p>索引的过程</p>
            </figure>
<p>}</p>
<blockquote>
<p><strong>问题：select * from user where cno = 3-245;</strong></p>
<ul>
<li>如果没有索引的时候，步骤：<ul>
<li>遍历整个表的内容，比较cno是否为3-245；</li>
<li>如果为3-245，就把数据放在内存的结果集中；</li>
<li>这样的话，会把表中的所有数据都查询一遍（IO多）；</li>
</ul>
</li>
<li>如果有索引：<ul>
<li>会在cno这一列建立一个索引，把数据按照cno进行排序，并把结果变成一个倒序表；</li>
<li>查询的时候在表中查询cno为3-245的那条记录，并把结果放到结果集中；</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="索引的好处"><a href="#索引的好处" class="headerlink" title="索引的好处"></a>索引的好处</h2><ul>
<li>提高检索效率；</li>
<li>如果在查询的时候，查询列==排序列（并且该列建立了索引），会大大提高排序效率；</li>
<li>如果分组的条件也是索引列的话，也会提高效率；</li>
</ul>
<h2 id="索引的弊端"><a href="#索引的弊端" class="headerlink" title="索引的弊端"></a>索引的弊端</h2><p>会需要额外的成本去维护索引；因为索引文件是单独存在的，对数据的增、删、改、查都会造成索引文件额外的io。</p>
<h2 id="怎样创建合适的索引？"><a href="#怎样创建合适的索引？" class="headerlink" title="怎样创建合适的索引？"></a>怎样创建合适的索引？</h2><ul>
<li>较频繁的查询字段应该建立索引；</li>
<li>唯一性差的字段不适合单独作为索引字段，即使查询频繁；<br>  解读：如果作为索引的列不能够有效的区分数据，就不适合作为索引列；例如：性别（只有两种可能性）；</li>
<li>更新非常频繁的字段不适合作为索引列；</li>
<li>索引不是越多越好；<ul>
<li>不管有多少个索引，一次查询只会使用一个索引（mysql引入复合索引）；</li>
<li>每个索引之间都是都是独立，数据的增、删、改、查都会造成每个索引文件的单独维护；</li>
</ul>
</li>
</ul>
<h2 id="索引的使用限制"><a href="#索引的使用限制" class="headerlink" title="索引的使用限制"></a>索引的使用限制</h2><ul>
<li>Blob和Text只能创建前缀索引；</li>
<li>mysql目前不支持函数索引（索引值是原始的值（birthday），函数作用（year（birthday）后无效）；    </li>
<li>在mysql中，使用了!= &lt;&gt;不能使用索引；</li>
<li>使用like匹配时：<ul>
<li>字符串是可以用来作为索引的，按照字母顺序排序；</li>
<li>‘h_’ 、 ‘h%’ 是可以使用索引的；</li>
<li>‘_h’ 、’%h’不可以使用索引；</li>
</ul>
</li>
</ul>
<h2 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h2><ul>
<li><p>概念：就是多列的值组合成的索引，并且，多列的索引是有序的；原理：类似order by（order by age,name）。例如：</p>
<blockquote>
<p>select <em> from user where age &lt; 30 ； 可以使用age+height的复合索引；<br>   select </em> from user where age &lt; 30 and height &lt;170; 可以使用age+height的复合索引；<br>   select <em> from user where height &lt;170; 不能使用age+height的复合索引；<br>   select </em> from user where height &lt;170 and age &lt; 30; 不能使用age+height的复合索引（但是mysql会优化，交换两者位置）；</p>
</blockquote>
</li>
<li><p>复合索引在查询的时候，遵循向左原则，只要是在查询过程中，是从左向右的执行，不管查询条件是否完全满足复合索引的列，都可以使用部分的复合索引；例如：<br>  现有复合索引：ABCD；如果where后面条件为：</p>
<ul>
<li>AB –&gt; 可以使用；</li>
<li>2）AC –&gt; 可以使用（只是使用A）；</li>
<li>3）BC –&gt; 不可以；</li>
</ul>
</li>
<li>实际开发中，基本都使用复合索引；</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sql基本命令]]></title>
      <url>/2016/11/29/mysql/mysql02/</url>
      <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="1、启动-停止mqsql的命令："><a href="#1、启动-停止mqsql的命令：" class="headerlink" title="1、启动/停止mqsql的命令："></a>1、启动/停止mqsql的命令：</h3><blockquote>
<p>net start/stop mysql     </p>
</blockquote>
<h3 id="2、登录mysql的命令："><a href="#2、登录mysql的命令：" class="headerlink" title="2、登录mysql的命令："></a>2、登录mysql的命令：</h3><blockquote>
<p>mysql -h 127.0.0.1 -u root -p<br>    -h：登录的主机名；<br>    -u：登录的用户名；<br>    -p：密码</p>
</blockquote>
<h3 id="3、展示表结构："><a href="#3、展示表结构：" class="headerlink" title="3、展示表结构："></a>3、展示表结构：</h3><blockquote>
<p>desc table_name;</p>
</blockquote>
<h3 id="4、修改某一个字段名称："><a href="#4、修改某一个字段名称：" class="headerlink" title="4、修改某一个字段名称："></a>4、修改某一个字段名称：</h3><blockquote>
<p>alter table table_name change （原字段）（新字段） （字段类型）；</p>
</blockquote>
<h3 id="5、将某个字段放到第一个，保留原完整性约束条件"><a href="#5、将某个字段放到第一个，保留原完整性约束条件" class="headerlink" title="5、将某个字段放到第一个，保留原完整性约束条件"></a>5、将某个字段放到第一个，保留原完整性约束条件</h3><blockquote>
<p>ALTER TABLE table_name modify test CHAR(32) NOT NULL DEFAULT ‘123’ FIRST;</p>
</blockquote>
<h3 id="6、修改某一个字段为主键（如果已有主键，先删除）："><a href="#6、修改某一个字段为主键（如果已有主键，先删除）：" class="headerlink" title="6、修改某一个字段为主键（如果已有主键，先删除）："></a>6、修改某一个字段为主键（如果已有主键，先删除）：</h3><blockquote>
<p>alter table table_name drop primary key;（删除已有主键）<br>    alter table table_name modify id int not null primary key auto_increment;</p>
</blockquote>
<h3 id="7、删除某个字段："><a href="#7、删除某个字段：" class="headerlink" title="7、删除某个字段："></a>7、删除某个字段：</h3><blockquote>
<p>alter table table_name drop （字段名），drop（字段名）;</p>
</blockquote>
<h3 id="8、删除某个库下所有表数据："><a href="#8、删除某个库下所有表数据：" class="headerlink" title="8、删除某个库下所有表数据："></a>8、删除某个库下所有表数据：</h3><blockquote>
<p>select CONCAT(‘delete from  ‘,table_name,’;’) from information_schema.tables where TABLE_SCHEMA = ‘库名’;</p>
</blockquote>
<h3 id="9、union合并两个或多个表结果集：（union不允许重复值，union-all允许重复值）"><a href="#9、union合并两个或多个表结果集：（union不允许重复值，union-all允许重复值）" class="headerlink" title="9、union合并两个或多个表结果集：（union不允许重复值，union all允许重复值）"></a>9、union合并两个或多个表结果集：（union不允许重复值，union all允许重复值）</h3><blockquote>
<p>select sname, ssex, sbirthday from students<br>union [all]<br>select tname, tsex, tbirthdayfrom teachers;</p>
</blockquote>
<h3 id="10、本地操作的权限"><a href="#10、本地操作的权限" class="headerlink" title="10、本地操作的权限"></a>10、本地操作的权限</h3><blockquote>
<p>grant all privileges on <em>.</em> to root@’%’ indentified by ‘root’;</p>
</blockquote>
<h2 id="where-group-by-having的用法和区别"><a href="#where-group-by-having的用法和区别" class="headerlink" title="where, group by, having的用法和区别"></a>where, group by, having的用法和区别</h2><h3 id="1）where"><a href="#1）where" class="headerlink" title="1）where"></a>1）where</h3><p>   数据库中常用的是where关键字，用于在初始表中筛选查询。它是一个约束声明，用于约束数据，在返回结果集之前起作用。如下面这个例子，从user表中查询出userDepartmentId等于2的数据<br>select * from dbo.user where userDepartmentId=2</p>
<h3 id="2）group-by"><a href="#2）group-by" class="headerlink" title="2）group by"></a>2）group by</h3><p>   对select查询出来的结果集按照某个字段或者表达式进行分组，获得一组组的集合，然后从每组中取出一个指定字段或者表达式的值。<br>     在说group by的时候，我们还需要了解聚合函数，聚合函数是SQL语言中一种特殊的函数。例如：<br>count(<em>)：获取数量<br>sum()：求和（通过isnull(xxx,0)将null的值赋为0）<br>avg()：求平均数<br>max()：求最大值<br>min()：求最小值<br>     这些函数和其它函数的根本区别就是它们一般作用在多条记录上。<br>我们需要注意的是：在使用group by的SQL语句中，select中返回的字段，必须满足以下两个条件之一：<br>     <strong>（1）包含在group by语句的后面，作为分组的依据；<br>     （2）这些字段包含在聚合函数中。</strong><br>     从刚才的那个例子中，我们查询出每个城市，相同年龄的员工数量：<br>select city, count(</em>),age from dbo.user where departmentID=2 group by city,age</p>
<h3 id="3）having：用于对where和group-by查询出来的分组经行过滤，查出满足条件的分组结果。它是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作。"><a href="#3）having：用于对where和group-by查询出来的分组经行过滤，查出满足条件的分组结果。它是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作。" class="headerlink" title="3）having：用于对where和group by查询出来的分组经行过滤，查出满足条件的分组结果。它是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作。"></a>3）having：用于对where和group by查询出来的分组经行过滤，查出满足条件的分组结果。它是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作。</h3><p>所以having的使用需要注意以下几点：<br><strong>having只能用于group by（分组统计语句中）<br>where 是用于在初始表中筛选查询，having用于在where和group by 结果分组中查询<br>having 子句中的每一个元素也必须出现在select列表中<br>having语句可以使用聚合函数，而where不使用。</strong></p>
<p>还是刚才的例子，我们进一步整理，查询员工数量大于20的城市和年龄段<br>select city, count(*),age from dbo.user where departmentID=2 group by city,age having age &gt;40</p>
<blockquote>
<p>需要注意的是，<br>having 子句中的每一个元素也必须出现在select列表中。有些数据库例外，如oracle.<br>having子句和where子句都可以用来设定限制条件以使查询结果满足一定的条件限制。<br>having子句限制的是组，而不是行。where子句中不能使用聚集函数，而having子句中可以。</p>
</blockquote>
<blockquote>
<p>当加上其他sql语句时，执行顺序如下：<br>S-F-W-G-H-O 组合<br>select –&gt;where –&gt; group by–&gt; having–&gt;order by<br>顺序是不能改变的</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql执行流程]]></title>
      <url>/2016/11/27/mysql/mysql01/</url>
      <content type="html"><![CDATA[<h3 id="mysql常用引擎："><a href="#mysql常用引擎：" class="headerlink" title="mysql常用引擎："></a>mysql常用引擎：</h3><blockquote>
<p>InnoDB（行锁，性能更高）、myISAM（表锁），Mysql在V5.1之前默认存储引擎是MyISAM；在此之后默认存储引擎是InnoDB；</p>
</blockquote>
<h3 id="sql执行过程"><a href="#sql执行过程" class="headerlink" title="sql执行过程"></a>sql执行过程</h3><p>@card{</p>
<figure class="image-box">
                <img src="https://app.yinxiang.com/shard/s54/res/a9b52c9e-10ba-47f8-8063-243d147fcb01/sql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="sql执行过程" title class>
                <p>sql执行过程</p>
            </figure>
<p>}</p>
<p>SQL的执行过程：<br>1 .客户端发送一条查询给服务器；<br>2 .服务器通过权限检查之后，先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果，否则进入下一阶段；<br>3 .服务器端进行sQL解析、预处理，再由优化器根据该sql所涉及到的数据表的统计信息进行计算，生成对应的执行计划；<br>4 . MySQL根据优化器生成的执行计划，调用存储引擎API来执行查询；<br>5 .将结果返回给客户端。</p>
<blockquote>
<p><strong>sql执行的最大瓶颈在于磁盘的IO</strong>，即数据的读取不同sQL的写法，会造成不同的执行计划的执行，而不同的执行计划在旧的上面临完全不一样的数量级，从而造成性能的差距；<br>所以，优化SQL，其实就是让充询优化器根据程序员的计划选择匹配的执行计划，来<strong>减少查询中产生的IO</strong>。  </p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
