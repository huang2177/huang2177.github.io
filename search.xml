<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Android中常用的图片压缩方式]]></title>
      <url>/2019/02/22/android-compress/</url>
      <content type="html"><![CDATA[<p>图片压缩方式常用的有尺寸压缩、质量压缩、格式变化以及通过JNI调用libjpeg库来进行压缩，下面就先分别介绍下常见的质量压缩和尺寸压缩。（尺寸压缩，质量压缩底层也是通过调用native的方法进行压缩的，而native中的则是通过Skia这个库实现的，但是，最终还是调用了libjpeg库进行压缩的。）</p>
<ol>
<li>格式变化<br>现在android支持的图片格式有三种：png、jpeg、webp； </li>
</ol>
<ul>
<li>png： 无损图片的压缩类型，能保存透明等图，它同时提供 24位和48位真彩色图像支持以及其他诸多技术性支持。 </li>
<li>Jpeg：有损图片的压缩类型，有损压缩方式去除冗余的图像和彩色数据，获取得极高的压缩率的同时能展现十分丰富生动的图像，换句话说，就是可以用最少的磁盘空间得到较好的图像质量。但是，bitmap quality属性越小，图片的清晰度越差。 </li>
<li>WebP：WebP（发音 weppy，项目主页），是谷歌推出的一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。</li>
</ul>
<p>结论：</p>
<ol start="2">
<li><p>质量压缩<br>设置bitmap quality属性，降低图片的质量，像素不会减少（就是指bitmap所占的内存大小），第一个参数为需要压缩的bitmap图片对象，第二个参数为压缩后图片保存的位置设置quality属性0-100，来实现压缩。（因为png是无损压缩，所以该属性对png是无效的。）</p>
<p>`/**</p>
<ul>
<li>质量压缩<br>*</li>
<li>@param format  图片格式   PNG，JPEG，WEBP</li>
<li>@param quality 图片的质量 1-100<br>*/<br>public void compress(Bitmap.CompressFormat format, int quality) {<br> FileOutputStream fos = null;<br> try {<pre><code>//得到一个储存路径
File file = new File(Environment.getExternalStorageDirectory(), &quot;test.jpg&quot;);
//得到一个文件输入流
fos = new FileOutputStream(file);
//开始压缩
Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.default_icon);
bitmap.compress(format, quality, fos);
</code></pre> } catch (FileNotFoundException e) {<pre><code>e.printStackTrace();
</code></pre> } finally {<pre><code>if (fos != null) {
    try {
        fos.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
</code></pre> }<br>}`</li>
</ul>
</li>
</ol>
<p>3.尺寸压缩<br>尺寸压缩由于是减小了图片的像素，所以它直接对bitmap产生了影响，当然最终生成的file文件也是相对的变小了；</p>
<p>通过缩放图片像素来减少图片占用内存大小<br><code>public static void compressBitmapToFile(Bitmap bmp, File file){
    // 尺寸压缩倍数,值越大，图片尺寸越小
    int ratio = 2;
    // 压缩Bitmap到对应尺寸
    Bitmap result = Bitmap.createBitmap(bmp.getWidth() / ratio, bmp.getHeight() / ratio, Config.ARGB_8888);
    Canvas canvas = new Canvas(result);
    Rect rect = new Rect(0, 0, bmp.getWidth() / ratio, bmp.getHeight() / ratio);
    canvas.drawBitmap(bmp, null, rect, null);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    // 把压缩后的数据存放到baos中
    result.compress(Bitmap.CompressFormat.JPEG, 100 ,baos);
    try {  
        FileOutputStream fos = new FileOutputStream(file);  
        fos.write(baos.toByteArray());  
        fos.flush();  
        fos.close();  
    } catch (Exception e) {  
        e.printStackTrace();  
    } 
}</code></p>
<p>设置图片的采样率，降低图片像素<br><code>public static void compressBitmap(String filePath, File file){
    // 数值越高，图片像素越低
    int inSampleSize = 2;
    BitmapFactory.Options options = new BitmapFactory.Options();
    //采样率
    options.inSampleSize = inSampleSize;
    Bitmap bitmap = BitmapFactory.decodeFile(filePath, options);  
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    // 把压缩后的数据存放到baos中
    bitmap.compress(Bitmap.CompressFormat.JPEG, 100 ,baos);
    try {  
        FileOutputStream fos = new FileOutputStream(file);  
        fos.write(baos.toByteArray());  
        fos.flush();  
        fos.close();  
    } catch (Exception e) {  
        e.printStackTrace();  
    } 
}</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android 7.0以后的popouwindow弹出问题]]></title>
      <url>/2019/02/22/android-access/</url>
      <content type="html"><![CDATA[<p><strong>android 7.0以后的popouwindow弹出问题</strong><br><code>public class CustomPopupWindow extends PopupWindow {
    public CustomPopupWindow(View contentView, int width, int height){
        super(contentView,width,height);
    }
    @Override
    public void showAsDropDown(View anchor) {
        if(Build.VERSION.SDK_INT &gt;= 24) {
            Rect rect = new Rect();
            anchor.getGlobalVisibleRect(rect);
            int h = anchor.getResources().getDisplayMetrics().heightPixels - rect.bottom;
            setHeight(h);
        }
        super.showAsDropDown(anchor);
    }
    @Override
    public void showAsDropDown(View anchor, int xoff, int yoff) {
        if(Build.VERSION.SDK_INT == 24) {
            Rect rect = new Rect();
            anchor.getGlobalVisibleRect(rect);
            int h = anchor.getResources().getDisplayMetrics().heightPixels - rect.bottom;
            setHeight(h);
    }
        super.showAsDropDown(anchor, xoff, yoff);
}</code></p>
<iframe type="music" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=464607112&auto=1&height=66"></iframe>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Scala基础语法]]></title>
      <url>/2019/02/21/first-blog/</url>
      <content type="html"><![CDATA[<p>1、什么是Hive？<br>    是由Facebook开源（后由Apache开发）的一个用来处理结构化数据的分析框架；<br>    是基于hadoop的一个数据仓库工具，可以将结构化数据文件映射为一张表，并提供SQL查询功能；<br>    本质：将HQL（hive的查询语句）转化为MapReduce程序；</p>
<p>2、Hive特点：<br>    1）hive并不是一个数据存在框架（数据存在HDFS）；<br>    2）hive实际上就相当于hadoop的一个客户端，可以执行查询，插入等动作；</p>
<pre><code>3）延迟比较高（需要转化为MapReduce），适用于实时性的离线数据分析；
4）不适合处理小数据（基于MapReduce）；
5）迭代式计算不能表达（相当于多个mr串联，所以并不适合）；
6）数据挖掘方面不擅长（因为数据挖掘更注重数据的迭代式计算）；
7）hive的处理能力有限，调优比较困难；
</code></pre><figure class="image-box">
                <img src="https://i.loli.net/2018/10/08/5bbb657a0fc16.png" alt title class>
                <p></p>
            </figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2019/02/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
